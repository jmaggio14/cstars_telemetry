// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
//
// ==============================================================

#ifndef XV_DPT3190_H
#define XV_DPT3190_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xv_dpt3190_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else

typedef struct {
    u8 UseofChanStatusBlock;
    u8 LinearPCMIdentifaction;
    u8 AudioSingalEmphasis;
    u8 LockIndication;
    u8 SamplingFreq;
} XV_dpt3190_ChanStat_Byte0;

typedef struct {
    u8 ChannelMode;
    u8 UserBitMngment;
} XV_dpt3190_ChanStat_Byte1;

typedef struct {
    u8 UseofAuxiliarySmpleBit;
    u8 AudioSmpleWordLength;
    u8 IndicationofAlignLevel;
} XV_dpt3190_ChanStat_Byte2;

typedef struct {
    u8 MultiChannelMode;
    u8 ChannelNumber;
    u8 DefMultiChannelMode;
    u8 DefChannelNumber;
} XV_dpt3190_ChanStat_Byte3;

typedef struct {
    u8 DigitalAudioRefSignal;
    u8 SamplingFreq;
    u8 SamplingFreqScalFlag;
} XV_dpt3190_ChanStat_Byte4;

typedef struct {
    u32 AphaNumerChanOriginData_0;
    u32 AphaNumerChanOriginData_1;
    u32 AphaNumerChanOriginData_2;
    u32 AphaNumerChanOriginData_3;
} XV_dpt3190_ChanStat_Byte6_to_Byte9;

typedef struct {
    u32 AphaNumerChanDestData_0;
    u32 AphaNumerChanDestData_1;
    u32 AphaNumerChanDestData_2;
    u32 AphaNumerChanDestData_3;
} XV_dpt3190_ChanStat_Byte10_to_Byte13;

typedef struct {
    u32 LocalSmpleAddrCode_0;
    u32 LocalSmpleAddrCode_1;
    u32 LocalSmpleAddrCode_2;
    u32 LocalSmpleAddrCode_3;
} XV_dpt3190_ChanStat_Byte14_to_Byte17;

typedef struct {
    u32 LocalSmpleAddrCode_0;
    u32 LocalSmpleAddrCode_1;
    u32 LocalSmpleAddrCode_2;
    u32 LocalSmpleAddrCode_3;
} XV_dpt3190_ChanStat_Byte18_to_Byte21;

typedef struct {
    XV_dpt3190_ChanStat_Byte0            Chan_Stat_Byte0;
    XV_dpt3190_ChanStat_Byte1            Chan_Stat_Byte1;
    XV_dpt3190_ChanStat_Byte2            Chan_Stat_Byte2;
    XV_dpt3190_ChanStat_Byte3            Chan_Stat_Byte3;
    XV_dpt3190_ChanStat_Byte4            Chan_Stat_Byte4;
    XV_dpt3190_ChanStat_Byte6_to_Byte9   Chan_Stat_Byte6_to_Byte9;
    XV_dpt3190_ChanStat_Byte10_to_Byte13 Chan_Stat_Byte10_to_Byte13;
    XV_dpt3190_ChanStat_Byte14_to_Byte17 Chan_Stat_Byte14_to_Byte17;
    XV_dpt3190_ChanStat_Byte18_to_Byte21 Chan_Stat_Byte18_to_Byte21;
    u32                                  Chan_Stat_Byte22;
    u32                                  Chan_Stat_Byte23;
} XV_dpt3190_ChanStat;

typedef struct {
    u16 DeviceId;
    u32 Ctrl_BaseAddress;
} XV_dpt3190_Config;
#endif

typedef struct {
    u32 Ctrl_BaseAddress;
    u32 IsReady;

    XV_dpt3190_ChanStat ChannelStatus;
} XV_dpt3190;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XV_dpt3190_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XV_dpt3190_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XV_dpt3190_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XV_dpt3190_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XV_dpt3190_Initialize(XV_dpt3190 *InstancePtr, u16 DeviceId);
XV_dpt3190_Config* XV_dpt3190_LookupConfig(u16 DeviceId);
int XV_dpt3190_CfgInitialize(XV_dpt3190 *InstancePtr, XV_dpt3190_Config *ConfigPtr);
#else
int XV_dpt3190_Initialize(XV_dpt3190 *InstancePtr, const char* InstanceName);
int XV_dpt3190_Release(XV_dpt3190 *InstancePtr);
#endif

void XV_dpt3190_ConfigChannelStatus(XV_dpt3190 *InstancePtr);

void XV_dpt3190_Start(XV_dpt3190 *InstancePtr);
u32 XV_dpt3190_IsDone(XV_dpt3190 *InstancePtr);
u32 XV_dpt3190_IsIdle(XV_dpt3190 *InstancePtr);
u32 XV_dpt3190_IsReady(XV_dpt3190 *InstancePtr);
void XV_dpt3190_EnableAutoRestart(XV_dpt3190 *InstancePtr);
void XV_dpt3190_DisableAutoRestart(XV_dpt3190 *InstancePtr);

void XV_dpt3190_Set_HwReg_num_samples_V(XV_dpt3190 *InstancePtr, u32 Data);
u32 XV_dpt3190_Get_HwReg_num_samples_V(XV_dpt3190 *InstancePtr);
void XV_dpt3190_Set_HwReg_audio_channels_V(XV_dpt3190 *InstancePtr, u32 Data);
u32 XV_dpt3190_Get_HwReg_audio_channels_V(XV_dpt3190 *InstancePtr);
u32 XV_dpt3190_Get_HwReg_pkt_type_V(XV_dpt3190 *InstancePtr);
u32 XV_dpt3190_Get_HwReg_pkt_type_V_vld(XV_dpt3190 *InstancePtr);
u32 XV_dpt3190_Get_HwReg_ch_no_V(XV_dpt3190 *InstancePtr);
u32 XV_dpt3190_Get_HwReg_ch_no_V_vld(XV_dpt3190 *InstancePtr);
u32 XV_dpt3190_Get_HwReg_pkt_length_V(XV_dpt3190 *InstancePtr);
u32 XV_dpt3190_Get_HwReg_pkt_length_V_vld(XV_dpt3190 *InstancePtr);
u32 XV_dpt3190_Get_HwReg_payload_type_V(XV_dpt3190 *InstancePtr);
u32 XV_dpt3190_Get_HwReg_payload_type_V_vld(XV_dpt3190 *InstancePtr);
u32 XV_dpt3190_Get_HwReg_rx_pkt_cnt_V(XV_dpt3190 *InstancePtr);
u32 XV_dpt3190_Get_HwReg_rx_pkt_cnt_V_vld(XV_dpt3190 *InstancePtr);
void XV_dpt3190_Set_HwReg_C31_0_V(XV_dpt3190 *InstancePtr, u32 Data);
u32 XV_dpt3190_Get_HwReg_C31_0_V(XV_dpt3190 *InstancePtr);
void XV_dpt3190_Set_HwReg_C63_32_V(XV_dpt3190 *InstancePtr, u32 Data);
u32 XV_dpt3190_Get_HwReg_C63_32_V(XV_dpt3190 *InstancePtr);
void XV_dpt3190_Set_HwReg_C95_64_V(XV_dpt3190 *InstancePtr, u32 Data);
u32 XV_dpt3190_Get_HwReg_C95_64_V(XV_dpt3190 *InstancePtr);
void XV_dpt3190_Set_HwReg_C127_96_V(XV_dpt3190 *InstancePtr, u32 Data);
u32 XV_dpt3190_Get_HwReg_C127_96_V(XV_dpt3190 *InstancePtr);
void XV_dpt3190_Set_HwReg_C159_128_V(XV_dpt3190 *InstancePtr, u32 Data);
u32 XV_dpt3190_Get_HwReg_C159_128_V(XV_dpt3190 *InstancePtr);
void XV_dpt3190_Set_HwReg_C191_160_V(XV_dpt3190 *InstancePtr, u32 Data);
u32 XV_dpt3190_Get_HwReg_C191_160_V(XV_dpt3190 *InstancePtr);
void XV_dpt3190_Set_HwReg_U31_0_V(XV_dpt3190 *InstancePtr, u32 Data);
u32 XV_dpt3190_Get_HwReg_U31_0_V(XV_dpt3190 *InstancePtr);
void XV_dpt3190_Set_HwReg_U63_32_V(XV_dpt3190 *InstancePtr, u32 Data);
u32 XV_dpt3190_Get_HwReg_U63_32_V(XV_dpt3190 *InstancePtr);
void XV_dpt3190_Set_HwReg_U95_64_V(XV_dpt3190 *InstancePtr, u32 Data);
u32 XV_dpt3190_Get_HwReg_U95_64_V(XV_dpt3190 *InstancePtr);
void XV_dpt3190_Set_HwReg_U127_96_V(XV_dpt3190 *InstancePtr, u32 Data);
u32 XV_dpt3190_Get_HwReg_U127_96_V(XV_dpt3190 *InstancePtr);
void XV_dpt3190_Set_HwReg_U159_128_V(XV_dpt3190 *InstancePtr, u32 Data);
u32 XV_dpt3190_Get_HwReg_U159_128_V(XV_dpt3190 *InstancePtr);
void XV_dpt3190_Set_HwReg_U191_160_V(XV_dpt3190 *InstancePtr, u32 Data);
u32 XV_dpt3190_Get_HwReg_U191_160_V(XV_dpt3190 *InstancePtr);
void XV_dpt3190_Set_HwReg_reserved1_V(XV_dpt3190 *InstancePtr, u32 Data);
u32 XV_dpt3190_Get_HwReg_reserved1_V(XV_dpt3190 *InstancePtr);
void XV_dpt3190_Set_HwReg_stat_reset_V(XV_dpt3190 *InstancePtr, u32 Data);
u32 XV_dpt3190_Get_HwReg_stat_reset_V(XV_dpt3190 *InstancePtr);

void XV_dpt3190_InterruptGlobalEnable(XV_dpt3190 *InstancePtr);
void XV_dpt3190_InterruptGlobalDisable(XV_dpt3190 *InstancePtr);
void XV_dpt3190_InterruptEnable(XV_dpt3190 *InstancePtr, u32 Mask);
void XV_dpt3190_InterruptDisable(XV_dpt3190 *InstancePtr, u32 Mask);
void XV_dpt3190_InterruptClear(XV_dpt3190 *InstancePtr, u32 Mask);
u32 XV_dpt3190_InterruptGetEnabled(XV_dpt3190 *InstancePtr);
u32 XV_dpt3190_InterruptGetStatus(XV_dpt3190 *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
