// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
//
// ==============================================================

#ifndef XV_PT4175_H
#define XV_PT4175_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xv_pt4175_hw.h"
#include "xvidc.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else

typedef struct {
    u16 ChannelNumber;
    u16 PixPerPkt;

    u8  Packet_Per_Line;
    u16 Packet_Length;
    u16 Re_Packet_Length;

    u32 SSRC;
    u8  DynamicPayloadType;
} XV_pt4175_PcktInfo;


typedef struct {
    u16 DeviceId;
    UINTPTR Ctrl_BaseAddress;

    u8 DynamicBPCEn;
    u8 MaxBPC;
    u8 SamplesPerClock;
    u16 MaxCol;
    u16 MaxRow;
} XV_pt4175_Config;
#endif

typedef struct {
    XV_pt4175_Config Config;
    u32 IsReady;

    XV_pt4175_PcktInfo  PcktInfo;
    XVidC_VideoStream   VideoStream;
} XV_pt4175;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XV_pt4175_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XV_pt4175_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XV_pt4175_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile UINTPTR*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XV_pt4175_ReadReg(BaseAddress, RegOffset) \
    *(volatile UINTPTR*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XV_pt4175_Initialize(XV_pt4175 *InstancePtr, u16 DeviceId);
XV_pt4175_Config* XV_pt4175_LookupConfig(u16 DeviceId);
int XV_pt4175_CfgInitialize(XV_pt4175 *InstancePtr, XV_pt4175_Config *ConfigPtr);
#else
int XV_pt4175_Initialize(XV_pt4175 *InstancePtr, const char* InstanceName);
int XV_pt4175_Release(XV_pt4175 *InstancePtr);
#endif

void XV_pt4175_SetVideoStream(XV_pt4175 *InstancePtr, XVidC_VideoStream VidStream);
void XV_pt4175_SetPcktInfo (XV_pt4175 *InstancePtr);
XV_pt4175_PcktInfo XV_pt4175_ComputePckt (XV_pt4175 *InstancePtr);
u16 XV_pt4175_LCM (int FirstVal, int SecondVal);

void XV_pt4175_Start(XV_pt4175 *InstancePtr);
u32 XV_pt4175_IsDone(XV_pt4175 *InstancePtr);
u32 XV_pt4175_IsIdle(XV_pt4175 *InstancePtr);
u32 XV_pt4175_IsReady(XV_pt4175 *InstancePtr);
void XV_pt4175_EnableAutoRestart(XV_pt4175 *InstancePtr);
void XV_pt4175_DisableAutoRestart(XV_pt4175 *InstancePtr);

void XV_pt4175_Set_HwReg_width_V(XV_pt4175 *InstancePtr, u32 Data);
u32 XV_pt4175_Get_HwReg_width_V(XV_pt4175 *InstancePtr);
void XV_pt4175_Set_HwReg_height_V(XV_pt4175 *InstancePtr, u32 Data);
u32 XV_pt4175_Get_HwReg_height_V(XV_pt4175 *InstancePtr);
void XV_pt4175_Set_HwReg_video_format_V(XV_pt4175 *InstancePtr, u32 Data);
u32 XV_pt4175_Get_HwReg_video_format_V(XV_pt4175 *InstancePtr);
void XV_pt4175_Set_HwReg_PktsPerLine_V(XV_pt4175 *InstancePtr, u32 Data);
u32 XV_pt4175_Get_HwReg_PktsPerLine_V(XV_pt4175 *InstancePtr);
void XV_pt4175_Set_HwReg_PyldLen_V(XV_pt4175 *InstancePtr, u32 Data);
u32 XV_pt4175_Get_HwReg_PyldLen_V(XV_pt4175 *InstancePtr);
void XV_pt4175_Set_HwReg_PyldLen_last_V(XV_pt4175 *InstancePtr, u32 Data);
u32 XV_pt4175_Get_HwReg_PyldLen_last_V(XV_pt4175 *InstancePtr);
void XV_pt4175_Set_HwReg_ssrc_V(XV_pt4175 *InstancePtr, u32 Data);
u32 XV_pt4175_Get_HwReg_ssrc_V(XV_pt4175 *InstancePtr);
void XV_pt4175_Set_HwReg_payloadtype_V(XV_pt4175 *InstancePtr, u32 Data);
u32 XV_pt4175_Get_HwReg_payloadtype_V(XV_pt4175 *InstancePtr);
void XV_pt4175_Set_HwReg_bpc_reg_V(XV_pt4175 *InstancePtr, u32 Data);
u32 XV_pt4175_Get_HwReg_bpc_reg_V(XV_pt4175 *InstancePtr);
void XV_pt4175_Set_HwReg_channel_number_V(XV_pt4175 *InstancePtr, u32 Data);
u32 XV_pt4175_Get_HwReg_channel_number_V(XV_pt4175 *InstancePtr);
u32 XV_pt4175_Get_HwReg_tx_pkt_cnt_V(XV_pt4175 *InstancePtr);
u32 XV_pt4175_Get_HwReg_tx_pkt_cnt_V_vld(XV_pt4175 *InstancePtr);
void XV_pt4175_Set_HwReg_PixPerPkt_V(XV_pt4175 *InstancePtr, u32 Data);
u32 XV_pt4175_Get_HwReg_PixPerPkt_V(XV_pt4175 *InstancePtr);
void XV_pt4175_Set_HwReg_stat_reset_V(XV_pt4175 *InstancePtr, u32 Data);
u32 XV_pt4175_Get_HwReg_stat_reset_V(XV_pt4175 *InstancePtr);
void XV_pt4175_Set_HwReg_interlace_ctrl_V(XV_pt4175 *InstancePtr, u32 Data);
u32 XV_pt4175_Get_HwReg_interlace_ctrl_V(XV_pt4175 *InstancePtr);

void XV_pt4175_InterruptGlobalEnable(XV_pt4175 *InstancePtr);
void XV_pt4175_InterruptGlobalDisable(XV_pt4175 *InstancePtr);
void XV_pt4175_InterruptEnable(XV_pt4175 *InstancePtr, u32 Mask);
void XV_pt4175_InterruptDisable(XV_pt4175 *InstancePtr, u32 Mask);
void XV_pt4175_InterruptClear(XV_pt4175 *InstancePtr, u32 Mask);
u32 XV_pt4175_InterruptGetEnabled(XV_pt4175 *InstancePtr);
u32 XV_pt4175_InterruptGetStatus(XV_pt4175 *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
